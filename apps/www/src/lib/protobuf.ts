// @generated by protoc-gen-es v2.2.0 with parameter "target=ts"
// @generated from file nillion/meta/v1/msg_pay_for.proto (package nillion.meta.v1, syntax proto3)

/* eslint-disable -- safe to disable  */
import type { Message } from '@bufbuild/protobuf';
import { create } from '@bufbuild/protobuf';
import type { GenFile, GenMessage } from '@bufbuild/protobuf/codegenv1';
import { fileDesc, messageDesc } from '@bufbuild/protobuf/codegenv1';
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import { TsProtoGeneratedType } from '@cosmjs/proto-signing/build/registry';

/**
 * Describes the file nillion/meta/v1/msg_pay_for.proto.
 */
export const file_nillion_meta_v1_msg_pay_for: GenFile =
  /*@__PURE__*/
  fileDesc(
    'CiFuaWxsaW9uL21ldGEvdjEvbXNnX3BheV9mb3IucHJvdG8SD25pbGxpb24ubWV0YS52MSJcCglNc2dQYXlGb3ISEAoIcmVzb3VyY2UYASABKAwSFAoMZnJvbV9hZGRyZXNzGAIgASgJEicKBmFtb3VudBgDIAMoCzIXLm5pbGxpb24ubWV0YS52MS5BbW91bnQiJwoGQW1vdW50Eg0KBWRlbm9tGAEgASgJEg4KBmFtb3VudBgCIAEoCUKDAQoTY29tLm5pbGxpb24ubWV0YS52MUIOTXNnUGF5Rm9yUHJvdG9QAaICA05NWKoCD05pbGxpb24uTWV0YS5WMcoCD05pbGxpb25cTWV0YVxWMeICG05pbGxpb25cTWV0YVxWMVxHUEJNZXRhZGF0YeoCEU5pbGxpb246Ok1ldGE6OlYxYgZwcm90bzM'
  );

/**
 * @generated from message nillion.meta.v1.MsgPayFor
 */
export type MsgPayFor = Message<'nillion.meta.v1.MsgPayFor'> & {
  /**
   * @generated from field: bytes resource = 1;
   */
  resource: Uint8Array;

  /**
   * @generated from field: string from_address = 2;
   */
  fromAddress: string;

  /**
   * @generated from field: repeated nillion.meta.v1.Amount amount = 3;
   */
  amount: Amount[];
};

/**
 * Describes the message nillion.meta.v1.MsgPayFor.
 * Use `create(MsgPayForSchema)` to create a new message.
 */
export const MsgPayForSchema: GenMessage<MsgPayFor> =
  /*@__PURE__*/
  messageDesc(file_nillion_meta_v1_msg_pay_for, 0);

/**
 * @generated from message nillion.meta.v1.Amount
 */
export type Amount = Message<'nillion.meta.v1.Amount'> & {
  /**
   * @generated from field: string denom = 1;
   */
  denom: string;

  /**
   * @generated from field: string amount = 2;
   */
  amount: string;
};

/**
 * Describes the message nillion.meta.v1.Amount.
 * Use `create(AmountSchema)` to create a new message.
 */
export const AmountSchema: GenMessage<Amount> =
  /*@__PURE__*/
  messageDesc(file_nillion_meta_v1_msg_pay_for, 1);

/**
 * This wrapper maintains API compatibility with the cosmjs library while using `@bufbuild/protobuf`.
 * It bridges the gap between different protobuf implementations during the migration from
 * protobufjs to `@bufbuild/protobuf` and from the cluster's migration from libp2p to gRPC.
 *
 * Only `encode` and `fromPartial` methods are implemented as they are sufficient for sending transactions.
 *
 * We use `@ts-expect-error` because `TsProtoGeneratedType` expects `protobuf.Writer/Reader`,
 * but we're using `BinaryWriter/Reader`. The methods used are compatible between these types,
 * allowing us to bypass the type check safely in this context.
 */
export const MsgPayForCompatWrapper: TsProtoGeneratedType = {
  // @ts-expect-error see MsgPayForCompatWrapper comment
  encode: (
    message: MsgPayFor,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter => {
    if (message.resource.length > 0) {
      writer.uint32(10).bytes(message.resource);
    }
    if (message.fromAddress !== '') {
      writer.uint32(18).string(message.fromAddress);
    }
    for (const amount of message.amount) {
      const amountWriter = new BinaryWriter();
      if (amount.denom !== '') {
        amountWriter.uint32(10).string(amount.denom);
      }
      if (amount.amount !== '') {
        amountWriter.uint32(18).string(amount.amount);
      }
      writer.uint32(26).bytes(amountWriter.finish());
    }
    return writer;
  },
  // @ts-expect-error see MsgPayForCompatWrapper comment
  decode: (_input: BinaryReader | Uint8Array, _length?: number): MsgPayFor => {
    throw new Error('MsgPayForCompatWrapper: decode not implemented');
  },
  fromPartial: (object: Partial<MsgPayFor>): MsgPayFor => {
    return create(MsgPayForSchema, {
      resource: object.resource,
      fromAddress: object.fromAddress,
      amount: object.amount,
    });
  },
};
